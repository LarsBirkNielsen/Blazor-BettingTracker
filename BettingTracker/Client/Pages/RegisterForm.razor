@using BettingTracker.Models.Dtos
<div class="body">
    <div class="registration-container">
        <div class="form">
            <h3>Register</h3>
            <EditForm Model="User" OnValidSubmit="HandleRegistration">
                <DataAnnotationsValidator />
                <div class="mb-3">
                    <label for="email">Email</label>
                    <InputText id="email" @bind-Value="User.Email" class="form-control" />
                    <ValidationMessage For="@(() => User.Email)" />
                </div>
                <div class="mb-3">
                    <label for="password">Password</label>
                    <InputText id="password" @bind-Value="User.Password" class="form-control" type="password" />
                    <ValidationMessage For="@(() => User.Password)" />
                </div>
                <div class="mb-3">
                    <label for="confirmPassword">Confirm Password</label>
                    <InputText id="confirmPassword" @bind-Value="User.ConfirmPassword" class="form-control" type="password" />
                    <ValidationMessage For="@(() => User.ConfirmPassword)" />
                </div>
                <button type="submit" class="btn btn-primary">Register</button>
                <button type="button" class="btn btn-login-form" @onclick="OnLoginClick">Login</button>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public EventCallback OnLoginClicked { get; set; }

    [Inject]
    ILocalStorageService LocalStorage { get; set; }

    [Inject]
    AuthenticationStateProvider AuthenticationStateProvider { get; set; }

    [Inject]
    NavigationManager NavigationManager { get; set; }

    [Parameter]
    public UserRegister User { get; set; }
    private string errorMessage = string.Empty;

    [Inject]
    private IAuthService authService { get; set; }

    private async Task HandleRegistration()
    {
        var result = await authService.Register(User);
        if (result.Success)
        {
            errorMessage = string.Empty;
            await LocalStorage.SetItemAsync("authToken", result.Data);
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
            NavigationManager.NavigateTo("/");
        }
        else
        {
            errorMessage = result.Message;
        }
    }

    private async Task OnLoginClick()
    {
        await OnLoginClicked.InvokeAsync();
    }
}