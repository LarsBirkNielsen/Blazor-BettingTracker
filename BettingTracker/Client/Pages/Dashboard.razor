@page "/dashboard"
@using BettingTracker.Client.Common
@using BettingTracker.Client.Services
@using System.Globalization
@using BettingTracker.Client.Services.DashboardService
@using BettingTracker.Models.Dtos
@using BettingTracker.Shared
@inject IDataService _dataService
@inject ILeagueService _leagueService
@inject HttpClient Http

<div class="container-fluid">
    <div class="row">
        <div class="col-lg-12 margin-b ">
            <div class="card">
                <div class="card-header">
                    Filter
                </div>
                @if (Leagues != null)
                {
                    <div class="card-body filter-bar">
                        @foreach (var league in Leagues)
                        {
                            <div class="form-check form-check-inline filter-item">
                                <input class="form-check-input" type="checkbox" id="@league.Name" value="@league.Name" checked="@IsLeagueChecked(league)" @onchange="((ChangeEventArgs __e) => LeagueChanged(__e, league))" />
                                <label class="form-check-label" for="@league.Name">@league.Name</label>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    </div>

    <div class="row">
        <DashboardCard Title="Total Profit" Data="@TotalProfit.ToString("C", new CultureInfo("da-DK"))" IconName="cash-outline" />
        <DashboardCard Title="Total Bets Placed" Data="@TotalBetsPlayed.ToString()" IconName="dice" />
        <DashboardCard Title="Total Wager" Data="@TotalWager.ToString("C", new CultureInfo("da-DK"))" IconName="wallet" />
        <DashboardCard Title="Total Roi" Data="@(TotalRoi.ToString("F2") + " %")" IconName="wallet" />
    </div>

    @*Accumalativ line-chart*@
    <div class="row">
        <div class="col-lg-8 margin-b">
            <div class="card">
                <div class="card-header">
                    @currentYear - Bank Roll
                </div>
                <div class="card-body">
                    <LineChart CurrentYear="currentYear" YearlyCumulativeProfit="yearlyCumulativeProfit" />
                </div>
            </div>
        </div>

        <div class="col-lg-4 margin-b">
            <div class="card">
                <div class="card-header">
                    @currentYear - Hit Rate
                </div>
                <div class="card-body">
                    <DonutChart CurrentYear="currentYear"
                                DoughnutFillColors="doughnutFillColors"
                                DoughnutStrokeColor="doughnutStrokeColor"
                                ChartData="chartData"
                                ShowDataLabels="showDataLabels"
                                WinPercentage="@winProcentage" />
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-4 margin-b">
            <div class="card adj-height">
                <div class="card-header">
                    @currentYear - Top Three Team Performance
                </div>
                <TeamPerformance LeastProfitableTeams="LeastProfitableTeams" MostProfitableTeams="MostProfitableTeams"/>
            </div>
        </div>

        <div class="col-lg-8 margin-b ">
            <div class="card adj-height">
                <div class="card-header">
                    @currentYear - Monthly Profit
                </div>
                <div class="card-body">
                    <BarChart YearlyProfit="@yearlyProfit" />
                </div>
            </div>
        </div>
    </div>
</div>



@code {
    private static int currentYear = DateTime.Today.Year;
    private ICollection<string> colors = new List<string>() { "#FBC687", "#F4F7C5", "#93ABD3" };
    private ICollection<YearlyItem> yearlyProfit;
    private ICollection<YearlyItem> yearlyCumulativeProfit;
    private List<HitRateModel> chartData;
    bool showDataLabels = false;
    string winProcentage = string.Empty;
    decimal TotalProfit;
    int TotalBetsPlayed;
    private decimal TotalWager;
    private decimal TotalRoi;
    private List<TeamProfitModel> MostProfitableTeams;
    private List<TeamProfitModel> LeastProfitableTeams;
    private HashSet<LeagueDto> selectedLeagues = new HashSet<LeagueDto>();
    private bool selectAllLeagues;
    public IEnumerable<LeagueDto> Leagues { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Leagues = await _leagueService.GetLeagues();
        TotalProfit = await _dataService.GetTotalProfit();
        TotalBetsPlayed = await _dataService.GetTotalBetsPlayed();
        TotalWager = await _dataService.GetTotalWagers();
        TotalRoi = await _dataService.GetTotalRoi();

        yearlyProfit = await _dataService.LoadCurrentYearProfit();
        yearlyCumulativeProfit = await _dataService.LoadCurrentCumulativeYearProfit();
        chartData = await _dataService.GetWinPercentageChartDataAsync();

        MostProfitableTeams = new List<TeamProfitModel>();
        LeastProfitableTeams = new List<TeamProfitModel>();
        (MostProfitableTeams, LeastProfitableTeams) = await _dataService.GetTopTeams();

        HitRateProcentage();

        StateHasChanged();
    }
    private bool IsLeagueChecked(LeagueDto league)
    {
        return selectedLeagues.Contains(league);
    }

    private async void LeagueChanged(ChangeEventArgs e, LeagueDto league)
    {
        bool isChecked = (bool)e.Value;
        if (isChecked)
        {
            selectedLeagues.Add(league);
        }
        else
        {
            selectedLeagues.Remove(league);
        }
        await RefreshData();
        StateHasChanged(); // Force a UI update
    }

    // Add this method to handle the "All Leagues" checkbox change
    private void SelectAllLeaguesChanged()
    {
        if (selectAllLeagues)
        {
            selectedLeagues.Clear();
            foreach (var league in Leagues)
            {
                selectedLeagues.Add(league);
            }
        }
        else
        {
            selectedLeagues.Clear();
        }
        RefreshData();
    }

    // Add this method to refresh data when checkboxes are changed
    private async Task RefreshData()
    {

        TotalProfit = await _dataService.GetTotalProfit(selectedLeagues);
        TotalBetsPlayed = await _dataService.GetTotalBetsPlayed(selectedLeagues);
        TotalWager = await _dataService.GetTotalWagers(selectedLeagues);
        TotalRoi = await _dataService.GetTotalRoi(selectedLeagues);

        yearlyProfit = await _dataService.LoadCurrentYearProfit(selectedLeagues);
        yearlyCumulativeProfit = await _dataService.LoadCurrentCumulativeYearProfit(selectedLeagues);
        chartData = await _dataService.GetWinPercentageChartDataAsync(selectedLeagues);


        (MostProfitableTeams, LeastProfitableTeams) = await _dataService.GetTopTeams(selectedLeagues);
        HitRateProcentage();


    }

    private ICollection<string> doughnutFillColors = new List<string>() { "#ff6961", "#AACDBE" };
    private ICollection<string> doughnutStrokeColor = new List<string>() { "#fdfeff" };


    string FormatAsDKK(object value)
    {
        return ((double)value).ToString("C0", CultureInfo.CreateSpecificCulture("da-DK"));
    }

    private void HitRateProcentage()
    {

        double lostCount = 0;
        double winCount = 0;

        foreach (var item in chartData)
        {
            if (item.Label.Equals("Lost"))
            {
                lostCount = item.Value;
            }
            else
            {
                winCount = item.Value;
            }
        }

        var totalPredictions = winCount + lostCount;
        if (totalPredictions > 0)
        {
            winProcentage = Math.Round((winCount / (totalPredictions) * 100)).ToString() + " %";
        }
        else
        {
            winProcentage = "0 %";
        }
    }
}
