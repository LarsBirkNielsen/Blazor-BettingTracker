@page "/login"
@using BettingTracker.Models.Dtos
@using Microsoft.AspNetCore.WebUtilities
@inject IAuthService AuthService
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (showLoginForm)
{
    <div class="body">
        <div class="login-container">
            <div class="form">
                <h3>Login</h3>
                <EditForm Model="user" OnValidSubmit="HandleLogin">
                    <DataAnnotationsValidator />
                    <div class="mb-3">
                        <label for="email">Email</label>
                        <InputText id="email" @bind-Value="user.Email" class="form-control" />
                        <ValidationMessage For="@(() => user.Email)" />
                    </div>
                    <div class="mb-3">
                        <label for="password">Password</label>
                        <InputText id="password" @bind-Value="user.Password" class="form-control" type="password" />
                        <ValidationMessage For="@(() => user.Password)" />
                    </div>
                    <button type="submit" class="btn btn-login-form">Login</button>
                    <button type="button" class="btn btn-login-form" @onclick="() => showLoginForm = false">Register</button>
                </EditForm>
            </div>
        </div>
    </div>
}
else
{
    <div class="body">
        <div class="login-container">
            <div class="form">
                <h3>Register</h3>
                <EditForm Model="registerUser" OnValidSubmit="HandleRegistration">
                    <DataAnnotationsValidator />
                    <div class="mb-3">
                        <label for="email">Email</label>
                        <InputText id="email" @bind-Value="registerUser.Email" class="form-control" />
                        <ValidationMessage For="@(() => registerUser.Email)" />
                    </div>
                    <div class="mb-3">
                        <label for="password">Password</label>
                        <InputText id="password" @bind-Value="registerUser.Password" class="form-control" type="password" />
                        <ValidationMessage For="@(() => registerUser.Password)" />
                    </div>
                    <div class="mb-3">
                        <label for="confirmPassword">Confirm Password</label>
                        <InputText id="confirmPassword" @bind-Value="registerUser.ConfirmPassword" class="form-control" type="password" />
                        <ValidationMessage For="@(() => registerUser.ConfirmPassword)" />
                    </div>
                    <button type="submit" class="btn btn-login-form">Confirm</button>
                    <button type="button" class="btn btn-login-form" @onclick="() => showLoginForm = true">Back</button>
                    <div class="@messageCssClass">
                        <span>@message</span>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}
@code {
    private UserLogin user = new UserLogin();
    private UserRegister registerUser = new UserRegister();
    private string errorMessage = string.Empty;
    private string message = string.Empty;
    private string messageCssClass = string.Empty;
    private bool showLoginForm = true;

    [Inject]
    private IAuthService authService { get; set; }

    private async Task HandleLogin()
    {
        var result = await authService.Login(user);
        if (result.Success)
        {
            errorMessage = string.Empty;
            await LocalStorage.SetItemAsync("authToken", result.Data);
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
            NavigationManager.NavigateTo("/");
        }
        else
        {
            errorMessage = result.Message;
        }
    }

    private async Task HandleRegistration()
    {
        var result = await authService.Register(registerUser);
        message = result.Message;
        if (result.Success)
            messageCssClass = "text-success";
        else
            messageCssClass = "text-danger";
    }

    private void toggleForm()
    {
        showLoginForm = !showLoginForm;
    }
}

